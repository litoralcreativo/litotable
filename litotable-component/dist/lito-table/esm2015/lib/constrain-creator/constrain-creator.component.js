import { Component, EventEmitter, Inject, Input, Output, ViewChild, } from '@angular/core';
import { MAT_DIALOG_DATA, } from '@angular/material/dialog';
import { NumberConstrain, MesurableConstrainType, DateConstrain, StringConstrainType, StringConstrain, } from '../configurations/fieldConstrians.config';
import { FormControl, FormGroup, Validators, } from '@angular/forms';
import { ColumnType } from '../decorators/column.decorator';
import { MatAccordion } from '@angular/material/expansion';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/material/stepper";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/material/select";
import * as i7 from "@angular/material/core";
import * as i8 from "@angular/material/expansion";
import * as i9 from "../lito-color-picker/lito-color-picker.component";
import * as i10 from "@angular/material/button-toggle";
import * as i11 from "@angular/material/icon";
import * as i12 from "@angular/material/datepicker";
import * as i13 from "@angular/material/slide-toggle";
import * as i14 from "@angular/common";
import * as i15 from "@angular/material/tooltip";
import * as i16 from "@angular/material/input";
export class ConstrainCreationFormData {
    constructor() {
        this.columns = [];
    }
}
export class ConstrainCreatorComponent {
    constructor(dialog) {
        this.dialog = dialog;
        this.columns = [];
        this.result = new EventEmitter();
    }
    ngOnInit() { }
    openDialog() {
        const dialogRef = this.dialog.open(ConstrainCreationForm, {
            data: { columns: this.columns },
            maxHeight: '80vh',
        });
        dialogRef.afterClosed().subscribe((result) => {
            if (result)
                this.result.emit(result);
        });
    }
}
ConstrainCreatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConstrainCreatorComponent, deps: [{ token: i1.MatDialog }], target: i0.ɵɵFactoryTarget.Component });
ConstrainCreatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConstrainCreatorComponent, selector: "litotable-constrain-creator", inputs: { columns: "columns" }, outputs: { result: "result-constrain" }, ngImport: i0, template: "<div (click)=\"openDialog()\">\n  <ng-content></ng-content>\n</div>\n", styles: [".constrain-mat-content-dual{display:flex;width:100%;justify-content:space-between;margin-bottom:1rem}.number-constrain-selector{display:flex;flex-direction:row;justify-content:center;align-items:center;margin-bottom:1rem}.number-constrain-selector>*{flex-grow:1}.flex-center{display:flex;justify-content:center;align-items:center}.mat-dialog-content{max-height:initial}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConstrainCreatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'litotable-constrain-creator',
                    templateUrl: './constrain-creator.component.html',
                    styleUrls: ['./constrain-creator.component.css'],
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }]; }, propDecorators: { columns: [{
                type: Input,
                args: ['columns']
            }], result: [{
                type: Output,
                args: ['result-constrain']
            }] } });
export class ConstrainCreationForm {
    constructor(dialogRef, data, _formBuilder) {
        this.dialogRef = dialogRef;
        this.data = data;
        this._formBuilder = _formBuilder;
        this.numberConstrainType = MesurableConstrainType;
        this.stringConstrainType = StringConstrainType;
        this.finalString = '';
        this.valueType = '';
        this.dateRange = new FormGroup({
            start: new FormControl(),
            end: new FormControl(),
        });
    }
    ngOnInit() {
        this.fieldFormGroup = this._formBuilder.group({
            field: ['', Validators.required],
        });
        this.stringFormGroup = this._formBuilder.group({
            startWith: [''],
            startWithToogle: [''],
            includes: [''],
            includesToogle: [''],
            endsWith: [''],
            endsWithToogle: [''],
        });
        this.resetValues();
        this.getFinalText();
    }
    onNoClick() {
        this.dialogRef.close();
    }
    onFieldSelectorChange(selected) {
        this.resetValues();
        if (selected) {
            this.fieldConstrain.propertyKey = selected.propertyKey;
            this.fieldConstrain.constrainName = selected.name;
            this.fieldConstrain.type = selected.type;
            switch (selected.type) {
                case ColumnType.DATE:
                    this.fieldConstrain.constrain = new DateConstrain(this.numberConstrainType.MORETHAN, [new Date(), new Date()], {
                        color: '#eee',
                        'background-color': '#888',
                    });
                    break;
                case ColumnType.STRING:
                case ColumnType.PHONE:
                case ColumnType.CUIT:
                    this.fieldConstrain.constrain = new StringConstrain({
                        color: '#eee',
                        'background-color': '#888',
                    });
                    break;
            }
        }
        this.getFinalText();
    }
    changeConstrainStyle(value, field) {
        if (field && field != '') {
            this.fieldConstrain.constrain.style[field] = value;
        }
    }
    changeConstrainState(value, field) {
        switch (field) {
            case 'date-type':
            case 'number-type':
                this.fieldConstrain.constrain.type = parseFloat(value.value);
                break;
            case 'number-value':
            case 'number-value1':
                this.fieldConstrain.constrain.values[0] = parseFloat(value.target.value);
                break;
            case 'number-value2':
                this.fieldConstrain.constrain.values[1] = parseFloat(value.target.value);
                break;
            case 'date-value':
            case 'date-value1':
                this.fieldConstrain.constrain.values[0] = new Date(value.value);
                break;
            case 'date-value2':
                this.fieldConstrain.constrain.values[1] = new Date(value.value);
                break;
        }
        this.getFinalText();
    }
    getFinalText() {
        this.finalString = '';
        switch (this.fieldConstrain.type) {
            case ColumnType.INTEGER:
            case ColumnType.FLOAT:
            case ColumnType.FLOAT:
                this.valueType = 'value';
                this.finalString = `that is `;
                break;
            case ColumnType.DATE:
                this.valueType = 'date';
                break;
            case ColumnType.STRING:
            case ColumnType.PHONE:
            case ColumnType.CUIT:
                this.valueType = 'string';
                this.finalString = `that `;
                break;
            default:
                this.valueType = 'value';
                break;
        }
        switch (this.fieldConstrain.type) {
            case ColumnType.INTEGER:
            case ColumnType.FLOAT:
            case ColumnType.CURRENCY:
                switch (this.fieldConstrain.constrain.type) {
                    case MesurableConstrainType.EQUALS:
                        this.finalString += `equal to ${this.fieldConstrain.constrain.values[0]}`;
                        break;
                    case MesurableConstrainType.MORETHAN:
                        this.finalString += `more than ${this.fieldConstrain.constrain.values[0]}`;
                        break;
                    case MesurableConstrainType.LESSTHAN:
                        this.finalString += `less than ${this.fieldConstrain.constrain.values[0]}`;
                        break;
                    case MesurableConstrainType.BETWEEN:
                        this.finalString += `between ${this.fieldConstrain.constrain.values[0]} and ${this.fieldConstrain.constrain.values[1]}`;
                        break;
                    case MesurableConstrainType.NOTBETWEEN:
                        this.finalString += `not between ${this.fieldConstrain.constrain.values[0]} and ${this.fieldConstrain.constrain.values[1]}`;
                        break;
                }
                break;
            case ColumnType.DATE:
                switch (this.fieldConstrain.constrain.type) {
                    case MesurableConstrainType.EQUALS:
                        this.finalString += `equal to ${this.shortDate(this.fieldConstrain.constrain.values[0])}`;
                        break;
                    case MesurableConstrainType.MORETHAN:
                        this.finalString += `after ${this.shortDate(this.fieldConstrain.constrain.values[0])}`;
                        break;
                    case MesurableConstrainType.LESSTHAN:
                        this.finalString += `before ${this.shortDate(this.fieldConstrain.constrain.values[0])}`;
                        break;
                    case MesurableConstrainType.BETWEEN:
                        this.finalString += `between ${this.shortDate(this.fieldConstrain.constrain.values[0])} and ${this.shortDate(this.fieldConstrain.constrain.values[1])}`;
                        break;
                    case MesurableConstrainType.NOTBETWEEN:
                        this.finalString += `not between ${this.shortDate(this.fieldConstrain.constrain.values[0])} and ${this.shortDate(this.fieldConstrain.constrain.values[1])}`;
                        break;
                }
                break;
            case ColumnType.STRING:
            case ColumnType.CUIT:
            case ColumnType.PHONE:
                for (let i = 0; i < this.fieldConstrain.constrain.constrainArray.length; i++) {
                    const strConstr = this.fieldConstrain.constrain.constrainArray[i];
                    switch (strConstr.type) {
                        case StringConstrainType.STARTSWITH:
                            this.finalString += `starts width ${strConstr.value}`;
                            break;
                        case StringConstrainType.CONTAINS:
                            this.finalString += `contains ${strConstr.value}`;
                            break;
                        case StringConstrainType.ENDWITH:
                            this.finalString += `ends width ${strConstr.value}`;
                            break;
                    }
                    if (this.fieldConstrain.constrain.constrainArray.length > 1) {
                        if (i < this.fieldConstrain.constrain.constrainArray.length - 2)
                            this.finalString += ', ';
                        if (i == this.fieldConstrain.constrain.constrainArray.length - 2)
                            this.finalString += ' and ';
                    }
                }
                break;
        }
    }
    shortDate(str) {
        return new Date(str).toLocaleDateString('en-US', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
        });
    }
    resetValues() {
        this.stringFormGroup.reset();
        this.fieldConstrain = {
            propertyKey: this.data.columns[0].propertyKey,
            constrainName: 'New Constrain',
            type: ColumnType.INTEGER,
            constrain: new NumberConstrain(this.numberConstrainType.MORETHAN, [0, 0], {
                color: '#eee',
                'background-color': '#888',
            }),
            metadata: {
                enable: true,
                trigger: (e) => false,
                style: {},
            },
        };
        if (this.strAccordion)
            this.strAccordion.closeAll();
    }
    updateStringConstrain() {
        let values = this.stringFormGroup.value;
        this.fieldConstrain.constrain.clearConstrains();
        if (values.startWithToogle && values.startWith)
            this.fieldConstrain.constrain.addConstrain({
                type: StringConstrainType.STARTSWITH,
                value: values.startWith,
            });
        if (values.includesToogle && values.includes)
            this.fieldConstrain.constrain.addConstrain({
                type: StringConstrainType.CONTAINS,
                value: values.includes,
            });
        if (values.endsWithToogle && values.endsWith)
            this.fieldConstrain.constrain.addConstrain({
                type: StringConstrainType.ENDWITH,
                value: values.endsWith,
            });
        this.getFinalText();
    }
    closeDialog() {
        this.dialogRef.close(this.fieldConstrain);
        console.log(this.fieldConstrain.constrain);
    }
}
ConstrainCreationForm.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConstrainCreationForm, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }, { token: i2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ConstrainCreationForm.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConstrainCreationForm, selector: "constrain-creation-form-dialog", viewQueries: [{ propertyName: "strAccordion", first: true, predicate: MatAccordion, descendants: true }], ngImport: i0, template: "<div mat-dialog-content>\r\n  <mat-stepper [linear]=\"true\" #stepper orientation=\"vertical\">\r\n    <!-- Field step -->\r\n    <mat-step [stepControl]=\"fieldFormGroup\">\r\n      <div style=\"margin-top: 1rem\"></div>\r\n      <ng-template matStepLabel>Select a field</ng-template>\r\n      <ng-container *ngTemplateOutlet=\"constrainNameSelector\"></ng-container>\r\n      <div>\r\n        <button mat-button matStepperNext>Next</button>\r\n      </div>\r\n    </mat-step>\r\n    <!-- Style step -->\r\n    <mat-step>\r\n      <div style=\"margin-top: 1rem\"></div>\r\n      <ng-template matStepLabel>Aply style</ng-template>\r\n      <ng-container *ngTemplateOutlet=\"constrainCreationStyle\"></ng-container>\r\n      <div>\r\n        <button mat-button matStepperPrevious>Back</button>\r\n        <button mat-button matStepperNext>Next</button>\r\n      </div>\r\n    </mat-step>\r\n    <!-- Constrain step -->\r\n    <mat-step>\r\n      <div style=\"margin-top: 1rem\"></div>\r\n      <ng-template matStepLabel>Set constrain</ng-template>\r\n      <ng-container [ngSwitch]=\"fieldConstrain.type\">\r\n        <!-- Numericos -->\r\n        <ng-container\r\n          *ngSwitchCase=\"1\"\r\n          [ngTemplateOutlet]=\"numberConstrainSelector\"\r\n        ></ng-container>\r\n        <ng-container\r\n          *ngSwitchCase=\"2\"\r\n          [ngTemplateOutlet]=\"numberConstrainSelector\"\r\n        ></ng-container>\r\n        <ng-container\r\n          *ngSwitchCase=\"4\"\r\n          [ngTemplateOutlet]=\"numberConstrainSelector\"\r\n        ></ng-container>\r\n\r\n        <!-- Date -->\r\n        <ng-container\r\n          *ngSwitchCase=\"3\"\r\n          [ngTemplateOutlet]=\"dateConstrainSelector\"\r\n        ></ng-container>\r\n        <!-- String -->\r\n        <ng-container\r\n          *ngSwitchCase=\"0\"\r\n          [ngTemplateOutlet]=\"stringConstrainSelector\"\r\n        ></ng-container>\r\n        <ng-container\r\n          *ngSwitchCase=\"5\"\r\n          [ngTemplateOutlet]=\"stringConstrainSelector\"\r\n        ></ng-container>\r\n        <ng-container\r\n          *ngSwitchCase=\"6\"\r\n          [ngTemplateOutlet]=\"stringConstrainSelector\"\r\n        ></ng-container>\r\n      </ng-container>\r\n\r\n      <div>\r\n        <button mat-button matStepperPrevious>Back</button>\r\n        <button mat-button matStepperNext>Next</button>\r\n      </div>\r\n    </mat-step>\r\n    <!-- Final step -->\r\n    <mat-step>\r\n      <ng-template matStepLabel>Done</ng-template>\r\n      <div style=\"width: 350px\">\r\n        <p\r\n          class=\"mat-elevation-z4\"\r\n          [style]=\"{\r\n            color: fieldConstrain.constrain.style['color'],\r\n            'background-color':\r\n              fieldConstrain.constrain.style['background-color'],\r\n            padding: '1rem',\r\n            'border-radius': '4px'\r\n          }\"\r\n        >\r\n          Every {{ valueType }} from column\r\n          <strong>{{ fieldConstrain.constrainName }}</strong>\r\n          {{ finalString }}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <button mat-button matStepperPrevious>Back</button>\r\n        <button mat-button (click)=\"stepper.reset(); resetValues()\">\r\n          Reset\r\n        </button>\r\n        <button mat-button (click)=\"closeDialog()\">Create</button>\r\n      </div>\r\n    </mat-step>\r\n  </mat-stepper>\r\n</div>\r\n\r\n<ng-template #constrainNameSelector>\r\n  <form [formGroup]=\"fieldFormGroup\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Field</mat-label>\r\n      <mat-select\r\n        formControlName=\"field\"\r\n        required\r\n        (ngModelChange)=\"onFieldSelectorChange($event)\"\r\n      >\r\n        <mat-option>None</mat-option>\r\n        <mat-option *ngFor=\"let column of data.columns\" [value]=\"column\">{{\r\n          column.name\r\n        }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </form>\r\n</ng-template>\r\n\r\n<ng-template #constrainCreationStyle>\r\n  <mat-expansion-panel\r\n    hideToggle\r\n    [style]=\"{\r\n      'background-color': fieldConstrain.constrain.style['background-color'],\r\n      'margin-bottom': '1rem'\r\n    }\"\r\n  >\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title\r\n        [style]=\"{\r\n          color: fieldConstrain.constrain.style['color'],\r\n          'justify-content': 'center'\r\n        }\"\r\n        >{{ fieldConstrain.constrainName }}</mat-panel-title\r\n      >\r\n    </mat-expansion-panel-header>\r\n    <div class=\"flex-center\">\r\n      <app-lito-color-picker\r\n        (result)=\"changeConstrainStyle($event, 'background-color')\"\r\n        content=\"Background\"\r\n      ></app-lito-color-picker>\r\n      <app-lito-color-picker\r\n        style=\"margin-left: 1rem\"\r\n        (result)=\"changeConstrainStyle($event, 'color')\"\r\n        content=\"Foreground\"\r\n      ></app-lito-color-picker>\r\n    </div>\r\n  </mat-expansion-panel>\r\n</ng-template>\r\n\r\n<ng-template #numberConstrainSelector>\r\n  <mat-button-toggle-group\r\n    class=\"number-constrain-selector\"\r\n    name=\"constrainSelect\"\r\n    aria-label=\"Constrain select\"\r\n    value=\"{{ fieldConstrain.constrain.type }}\"\r\n    (change)=\"changeConstrainState($event, 'number-type')\"\r\n  >\r\n    <mat-button-toggle value=\"1\" matTooltip=\"EQUALS\">\r\n      <mat-icon>drag_handle</mat-icon>\r\n    </mat-button-toggle>\r\n    <mat-button-toggle value=\"2\" matTooltip=\"MORE THAN\">\r\n      <mat-icon style=\"transform: rotate(90deg)\">expand_less</mat-icon>\r\n    </mat-button-toggle>\r\n    <mat-button-toggle value=\"3\" matTooltip=\"LESS THAN\">\r\n      <mat-icon style=\"transform: rotate(90deg)\">expand_more</mat-icon>\r\n    </mat-button-toggle>\r\n    <mat-button-toggle value=\"4\" matTooltip=\"BETWEEN\">\r\n      <mat-icon style=\"transform: rotate(90deg)\">unfold_less</mat-icon>\r\n    </mat-button-toggle>\r\n    <mat-button-toggle value=\"5\" matTooltip=\"NOT BETWEEN\">\r\n      <mat-icon style=\"transform: rotate(90deg)\">unfold_more</mat-icon>\r\n    </mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n  <div\r\n    *ngIf=\"\r\n      fieldConstrain.constrain.type != numberConstrainType.BETWEEN &&\r\n      fieldConstrain.constrain.type != numberConstrainType.NOTBETWEEN\r\n    \"\r\n    style=\"display: flex; justify-content: space-between\"\r\n  >\r\n    <mat-form-field style=\"width: 100%\" appearance=\"fill\">\r\n      <mat-label\r\n        (click)=\"$event.stopPropagation()\"\r\n        [ngSwitch]=\"fieldConstrain.constrain.type\"\r\n      >\r\n        <span *ngSwitchCase=\"numberConstrainType.EQUALS\">EQUALS</span>\r\n        <span *ngSwitchCase=\"numberConstrainType.LESSTHAN\">LESS THAN</span>\r\n        <span *ngSwitchCase=\"numberConstrainType.MORETHAN\">MORE THAN</span>\r\n      </mat-label>\r\n      <input\r\n        type=\"number\"\r\n        step=\"0.1\"\r\n        (change)=\"\r\n          $event.stopPropagation(); changeConstrainState($event, 'number-value')\r\n        \"\r\n        (keyup)=\"\r\n          $event.stopPropagation(); changeConstrainState($event, 'number-value')\r\n        \"\r\n        matInput\r\n        placeholder=\"\"\r\n        value=\"{{ fieldConstrain.constrain.values[0] }}\"\r\n      />\r\n    </mat-form-field>\r\n  </div>\r\n  <!-- BETWEEN -->\r\n  <div\r\n    *ngIf=\"\r\n      fieldConstrain.constrain.type == numberConstrainType.BETWEEN ||\r\n      fieldConstrain.constrain.type == numberConstrainType.NOTBETWEEN\r\n    \"\r\n    style=\"max-width: fit-content; display: flow-root\"\r\n  >\r\n    <mat-form-field style=\"max-width: 45%; float: left\" appearance=\"fill\">\r\n      <mat-label (click)=\"$event.stopPropagation()\">{{\r\n        fieldConstrain.constrain.type == numberConstrainType.BETWEEN\r\n          ? \"MORE THAN\"\r\n          : \"LESS THAN\"\r\n      }}</mat-label>\r\n      <input\r\n        type=\"number\"\r\n        step=\"100\"\r\n        (change)=\"changeConstrainState($event, 'number-value1')\"\r\n        (keyup)=\"changeConstrainState($event, 'number-value1')\"\r\n        matInput\r\n        placeholder=\"\"\r\n        [max]=\"fieldConstrain.constrain.values[1]\"\r\n        value=\"{{ fieldConstrain.constrain.values[0] }}\"\r\n      />\r\n    </mat-form-field>\r\n    <mat-form-field\r\n      style=\"max-width: 45%; float: right\"\r\n      appearance=\"fill\"\r\n      (click)=\"$event.stopPropagation()\"\r\n      (keypress)=\"$event.stopPropagation()\"\r\n      (keydown)=\"$event.stopPropagation()\"\r\n    >\r\n      <mat-label\r\n        (click)=\"$event.stopPropagation()\"\r\n        (keypress)=\"$event.stopPropagation()\"\r\n      >\r\n        {{\r\n          fieldConstrain.constrain.type == numberConstrainType.BETWEEN\r\n            ? \"LESS THAN\"\r\n            : \"MORE THAN\"\r\n        }}\r\n      </mat-label>\r\n      <input\r\n        type=\"number\"\r\n        step=\"100\"\r\n        (change)=\"changeConstrainState($event, 'number-value2')\"\r\n        (click)=\"$event.stopPropagation()\"\r\n        (keydown)=\"$event.stopPropagation()\"\r\n        (keypress)=\"$event.stopPropagation()\"\r\n        (keyup)=\"changeConstrainState($event, 'number-value2')\"\r\n        matInput\r\n        placeholder=\"\"\r\n        [min]=\"fieldConstrain.constrain.values[0]\"\r\n        value=\"{{ fieldConstrain.constrain.values[1] }}\"\r\n      />\r\n    </mat-form-field>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #dateConstrainSelector>\r\n  <mat-button-toggle-group\r\n    class=\"number-constrain-selector\"\r\n    name=\"constrainSelect\"\r\n    aria-label=\"Constrain select\"\r\n    value=\"{{ fieldConstrain.constrain.type }}\"\r\n    (change)=\"changeConstrainState($event, 'date-type')\"\r\n  >\r\n    <!-- <mat-button-toggle value=\"1\" matTooltip=\"EQUALS\">\r\n      <mat-icon>drag_handle</mat-icon>\r\n    </mat-button-toggle> -->\r\n    <mat-button-toggle value=\"2\" matTooltip=\"AFTER\">\r\n      <mat-icon style=\"transform: rotate(90deg)\">expand_less</mat-icon>\r\n    </mat-button-toggle>\r\n    <mat-button-toggle value=\"3\" matTooltip=\"BEFORE\">\r\n      <mat-icon style=\"transform: rotate(90deg)\">expand_more</mat-icon>\r\n    </mat-button-toggle>\r\n    <mat-button-toggle value=\"4\" matTooltip=\"BETWEEN\">\r\n      <mat-icon style=\"transform: rotate(90deg)\">unfold_less</mat-icon>\r\n    </mat-button-toggle>\r\n    <mat-button-toggle value=\"5\" matTooltip=\"NOT BETWEEN\">\r\n      <mat-icon style=\"transform: rotate(90deg)\">unfold_more</mat-icon>\r\n    </mat-button-toggle>\r\n  </mat-button-toggle-group>\r\n  <div style=\"display: flex; justify-content: space-between\">\r\n    <!-- EQUALS, LESSTHAN, MORETHAN -->\r\n    <mat-form-field\r\n      style=\"width: 100%\"\r\n      appearance=\"fill\"\r\n      *ngIf=\"\r\n        fieldConstrain.constrain.type == numberConstrainType.EQUALS ||\r\n        fieldConstrain.constrain.type == numberConstrainType.LESSTHAN ||\r\n        fieldConstrain.constrain.type == numberConstrainType.MORETHAN\r\n      \"\r\n    >\r\n      <mat-label [ngSwitch]=\"fieldConstrain.constrain.type\">\r\n        <span *ngSwitchCase=\"numberConstrainType.EQUALS\">EQUALS</span>\r\n        <span *ngSwitchCase=\"numberConstrainType.LESSTHAN\">Choose a date</span>\r\n        <span *ngSwitchCase=\"numberConstrainType.MORETHAN\">Choose a date</span>\r\n        <span *ngSwitchCase=\"numberConstrainType.BETWEEN\"\r\n          >Choose a date range</span\r\n        >\r\n        <span *ngSwitchCase=\"numberConstrainType.NOTBETWEEN\"\r\n          >Choose a date range</span\r\n        >\r\n      </mat-label>\r\n\r\n      <input\r\n        matInput\r\n        [matDatepicker]=\"picker\"\r\n        (dateChange)=\"changeConstrainState($event, 'date-value')\"\r\n      />\r\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n      <mat-datepicker #picker></mat-datepicker>\r\n    </mat-form-field>\r\n\r\n    <!-- BETWEEN, NOTBETWEEN -->\r\n    <mat-form-field\r\n      style=\"width: 100%\"\r\n      appearance=\"fill\"\r\n      *ngIf=\"\r\n        fieldConstrain.constrain.type == numberConstrainType.BETWEEN ||\r\n        fieldConstrain.constrain.type == numberConstrainType.NOTBETWEEN\r\n      \"\r\n    >\r\n      <mat-date-range-input [formGroup]=\"dateRange\" [rangePicker]=\"rangePicker\">\r\n        <input\r\n          matStartDate\r\n          formControlName=\"start\"\r\n          placeholder=\"{{ numberConstrainType.BETWEEN ? 'After' : 'Bafore' }}\"\r\n          (dateChange)=\"changeConstrainState($event, 'date-value1')\"\r\n        />\r\n        <input\r\n          matEndDate\r\n          formControlName=\"end\"\r\n          placeholder=\"{{ numberConstrainType.BETWEEN ? 'Before' : 'After' }}\"\r\n          (dateChange)=\"changeConstrainState($event, 'date-value2')\"\r\n        />\r\n      </mat-date-range-input>\r\n      <mat-datepicker-toggle\r\n        matSuffix\r\n        [for]=\"rangePicker\"\r\n      ></mat-datepicker-toggle>\r\n      <mat-date-range-picker #rangePicker></mat-date-range-picker>\r\n    </mat-form-field>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #stringConstrainSelector>\r\n  <mat-accordion>\r\n    <mat-expansion-panel hideToggle>\r\n      <mat-expansion-panel-header>\r\n        <mat-panel-title>\r\n          <mat-icon *ngIf=\"swEnable.checked\" color=\"accent\">\r\n            radio_button_checked\r\n          </mat-icon>\r\n          <mat-icon *ngIf=\"!swEnable.checked\" style=\"color: gray\"\r\n            >radio_button_checked</mat-icon\r\n          >\r\n          <span class=\"flex-center\">&nbsp;Starts with</span>\r\n        </mat-panel-title>\r\n        <mat-panel-description>\r\n          <span class=\"flex-center\">{{ swInput.value }}</span>\r\n        </mat-panel-description>\r\n      </mat-expansion-panel-header>\r\n      <form [formGroup]=\"stringFormGroup\" (change)=\"updateStringConstrain()\">\r\n        <mat-form-field appearance=\"fill\">\r\n          <mat-label>Value</mat-label>\r\n          <input\r\n            matInput\r\n            autocomplete=\"off\"\r\n            #swInput\r\n            formControlName=\"startWith\"\r\n          />\r\n        </mat-form-field>\r\n        <mat-slide-toggle\r\n          (change)=\"updateStringConstrain()\"\r\n          #swEnable\r\n          style=\"margin-left: 1rem\"\r\n          formControlName=\"startWithToogle\"\r\n        ></mat-slide-toggle>\r\n      </form>\r\n    </mat-expansion-panel>\r\n    <mat-expansion-panel hideToggle>\r\n      <mat-expansion-panel-header>\r\n        <mat-panel-title>\r\n          <mat-icon *ngIf=\"siEnable.checked\" color=\"accent\"\r\n            >radio_button_checked</mat-icon\r\n          >\r\n          <mat-icon *ngIf=\"!siEnable.checked\" style=\"color: gray\"\r\n            >radio_button_checked</mat-icon\r\n          >\r\n          <span class=\"flex-center\">&nbsp;Includes</span>\r\n        </mat-panel-title>\r\n        <mat-panel-description>\r\n          <span class=\"flex-center\">{{ siInput.value }}</span>\r\n        </mat-panel-description>\r\n      </mat-expansion-panel-header>\r\n      <form [formGroup]=\"stringFormGroup\" (change)=\"updateStringConstrain()\">\r\n        <mat-form-field appearance=\"fill\">\r\n          <mat-label>Value</mat-label>\r\n          <input\r\n            matInput\r\n            autocomplete=\"off\"\r\n            #siInput\r\n            formControlName=\"includes\"\r\n          />\r\n        </mat-form-field>\r\n        <mat-slide-toggle\r\n          (change)=\"updateStringConstrain()\"\r\n          #siEnable\r\n          style=\"margin-left: 1rem\"\r\n          formControlName=\"includesToogle\"\r\n        ></mat-slide-toggle>\r\n      </form>\r\n    </mat-expansion-panel>\r\n    <mat-expansion-panel hideToggle style=\"margin-bottom: 1rem\">\r\n      <mat-expansion-panel-header>\r\n        <mat-panel-title>\r\n          <mat-icon *ngIf=\"ewEnable.checked\" color=\"accent\"\r\n            >radio_button_checked</mat-icon\r\n          >\r\n          <mat-icon *ngIf=\"!ewEnable.checked\" style=\"color: gray\"\r\n            >radio_button_checked</mat-icon\r\n          >\r\n          <span class=\"flex-center\">&nbsp;Ends with</span>\r\n        </mat-panel-title>\r\n        <mat-panel-description>\r\n          <span class=\"flex-center\">{{ ewInput.value }}</span>\r\n        </mat-panel-description>\r\n      </mat-expansion-panel-header>\r\n      <form [formGroup]=\"stringFormGroup\" (change)=\"updateStringConstrain()\">\r\n        <mat-form-field appearance=\"fill\">\r\n          <mat-label>Value</mat-label>\r\n          <input\r\n            matInput\r\n            autocomplete=\"off\"\r\n            #ewInput\r\n            formControlName=\"endsWith\"\r\n          />\r\n        </mat-form-field>\r\n        <mat-slide-toggle\r\n          (change)=\"updateStringConstrain()\"\r\n          #ewEnable\r\n          style=\"margin-left: 1rem\"\r\n          formControlName=\"endsWithToogle\"\r\n        ></mat-slide-toggle>\r\n      </form>\r\n    </mat-expansion-panel>\r\n  </mat-accordion>\r\n</ng-template>\r\n", styles: [".constrain-mat-content-dual{display:flex;width:100%;justify-content:space-between;margin-bottom:1rem}.number-constrain-selector{display:flex;flex-direction:row;justify-content:center;align-items:center;margin-bottom:1rem}.number-constrain-selector>*{flex-grow:1}.flex-center{display:flex;justify-content:center;align-items:center}.mat-dialog-content{max-height:initial}\n"], components: [{ type: i3.MatStepper, selector: "mat-stepper, mat-vertical-stepper, mat-horizontal-stepper, [matStepper]", inputs: ["selectedIndex", "labelPosition", "disableRipple", "color"], outputs: ["animationDone"], exportAs: ["matStepper", "matVerticalStepper", "matHorizontalStepper"] }, { type: i3.MatStep, selector: "mat-step", inputs: ["color"], exportAs: ["matStep"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i5.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i6.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i7.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i8.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { type: i8.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }, { type: i9.LitoColorPickerComponent, selector: "app-lito-color-picker", inputs: ["colors", "content"], outputs: ["result", "newColorArray"] }, { type: i10.MatButtonToggle, selector: "mat-button-toggle", inputs: ["disableRipple", "aria-labelledby", "tabIndex", "appearance", "checked", "disabled", "id", "name", "aria-label", "value"], outputs: ["change"], exportAs: ["matButtonToggle"] }, { type: i11.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i12.MatDatepickerToggle, selector: "mat-datepicker-toggle", inputs: ["tabIndex", "disabled", "for", "aria-label", "disableRipple"], exportAs: ["matDatepickerToggle"] }, { type: i12.MatDatepicker, selector: "mat-datepicker", exportAs: ["matDatepicker"] }, { type: i12.MatDateRangeInput, selector: "mat-date-range-input", inputs: ["separator", "comparisonStart", "comparisonEnd", "rangePicker", "required", "dateFilter", "min", "max", "disabled"], exportAs: ["matDateRangeInput"] }, { type: i12.MatDateRangePicker, selector: "mat-date-range-picker", exportAs: ["matDateRangePicker"] }, { type: i13.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }], directives: [{ type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i3.MatStepLabel, selector: "[matStepLabel]" }, { type: i14.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.MatStepperNext, selector: "button[matStepperNext]", inputs: ["type"] }, { type: i3.MatStepperPrevious, selector: "button[matStepperPrevious]", inputs: ["type"] }, { type: i14.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i14.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.MatLabel, selector: "mat-label" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.MatExpansionPanelTitle, selector: "mat-panel-title" }, { type: i10.MatButtonToggleGroup, selector: "mat-button-toggle-group", inputs: ["appearance", "name", "vertical", "value", "multiple", "disabled"], outputs: ["valueChange", "change"], exportAs: ["matButtonToggleGroup"] }, { type: i15.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i16.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i12.MatDatepickerInput, selector: "input[matDatepicker]", inputs: ["matDatepicker", "min", "max", "matDatepickerFilter"], exportAs: ["matDatepickerInput"] }, { type: i5.MatSuffix, selector: "[matSuffix]" }, { type: i12.MatStartDate, selector: "input[matStartDate]", inputs: ["errorStateMatcher"], outputs: ["dateChange", "dateInput"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i12.MatEndDate, selector: "input[matEndDate]", inputs: ["errorStateMatcher"], outputs: ["dateChange", "dateInput"] }, { type: i8.MatAccordion, selector: "mat-accordion", inputs: ["multi", "displayMode", "togglePosition", "hideToggle"], exportAs: ["matAccordion"] }, { type: i8.MatExpansionPanelDescription, selector: "mat-panel-description" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConstrainCreationForm, decorators: [{
            type: Component,
            args: [{
                    selector: 'constrain-creation-form-dialog',
                    templateUrl: 'constrain-form.component.html',
                    styleUrls: ['./constrain-creator.component.css'],
                }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: ConstrainCreationFormData, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i2.FormBuilder }]; }, propDecorators: { strAccordion: [{
                type: ViewChild,
                args: [MatAccordion]
            }] } });
//# sourceMappingURL=data:application/json;base64,