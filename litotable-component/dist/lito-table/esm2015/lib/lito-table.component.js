import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import 'reflect-metadata';
import { Column } from './column';
import { MesurableConstrainType, } from './configurations/fieldConstrians.config';
import { TableOperation, } from './configurations/litotable.config';
import { ColumnType } from './decorators/column.decorator';
import { moveItemInArray, } from '@angular/cdk/drag-drop';
import { MatDrawer } from '@angular/material/sidenav';
import { FormControl } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@angular/material/expansion";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/material/select";
import * as i7 from "@angular/material/core";
import * as i8 from "@angular/material/sidenav";
import * as i9 from "@angular/material/table";
import * as i10 from "@angular/material/checkbox";
import * as i11 from "@angular/material/sort";
import * as i12 from "@angular/material/paginator";
import * as i13 from "@angular/material/progress-bar";
import * as i14 from "@angular/material/menu";
import * as i15 from "@angular/material/divider";
import * as i16 from "@angular/material/slide-toggle";
import * as i17 from "./constrain-creator/constrain-creator.component";
import * as i18 from "@angular/material/card";
import * as i19 from "./lito-color-picker/lito-color-picker.component";
import * as i20 from "@angular/material/button-toggle";
import * as i21 from "@angular/common";
import * as i22 from "@angular/material/tooltip";
import * as i23 from "@angular/forms";
import * as i24 from "@angular/material/input";
import * as i25 from "@angular/cdk/drag-drop";
import * as i26 from "./pipes/cuit.pipe";
import * as i27 from "./pipes/phone.pipe";
export class LitotableComponent {
    constructor(_liveAnnouncer) {
        this._liveAnnouncer = _liveAnnouncer;
        /* Enums */
        this.columnTypes = ColumnType;
        this.operationTypes = TableOperation;
        this.columns = [];
        this.numberConstrainType = MesurableConstrainType;
        this.displayedColumns = new DisplayedColumns();
        this.rowConstrains = [];
        this.dataSource = new MatTableDataSource();
        this.fetching = false;
        this.selectedRows = new Set();
        this.constrainedRows = new Set();
        this.showSelectedOnly = false;
        this.creationFormOpen = false;
        this._confirmation = 'multiple';
        /* Filter */
        this.filteringColumnsFormControl = new FormControl();
        this.filteringStringFormControl = new FormControl('');
        this.fieldConstrians = [];
        this.multipleActionOutput = new EventEmitter();
        this.singleActionOutput = new EventEmitter();
        this.draganddrop = false;
    }
    ngOnInit() {
        this.setColumns();
        if (this.inputSource != undefined) {
            this.fetching = true;
            this.inputSource.subscribe((datos) => {
                var _a;
                this.fetching = false;
                this.dataSource = new MatTableDataSource(datos);
                this.dataSource.paginator = this.paginator;
                this.dataSource.sort = this.sort;
                this.setRowsConstrains(datos);
                (_a = this.tableActionsConfig) === null || _a === void 0 ? void 0 : _a.updatePermormableState(this.selectedRows);
                this.defaultFilterPredicate = this.dataSource.filterPredicate;
            });
        }
        else {
            let c = [];
            this.dataSource = new MatTableDataSource(c);
        }
        this.dataSource.paginator = this.paginator;
    }
    parseDate(input) {
        return input.toJSON();
    }
    ngAfterViewInit() {
        this.dataSource.paginator = this.paginator;
    }
    announceSortChange(sortState) {
        if (sortState.direction) {
            this._liveAnnouncer.announce(`Sorted ${sortState.direction}ending`);
        }
        else {
            this._liveAnnouncer.announce('Sorting cleared');
        }
    }
    updateFieldsToRowsConstrains() {
        if (this.fieldConstrians) {
            this.rowConstrains = this.fieldConstrians.map((x) => {
                return new RowConstrain(x.propertyKey, x.constrain);
            });
        }
    }
    setRowsConstrains(source) {
        this.updateFieldsToRowsConstrains();
        source.forEach((element) => {
            this.rowConstrains.forEach((rc) => {
                const value = element[rc.name];
                if (rc._constrain.trigger(value)) {
                    if (rc._constrain.enable) {
                        if (!element['rowStyle']) {
                            Object.defineProperty(element, 'rowStyle', {
                                configurable: true,
                                enumerable: false,
                                value: { style: rc._constrain.style },
                                writable: true,
                            });
                        }
                        else if (element['rowStyle']) {
                            element['rowStyle'].style = Object.assign(Object.assign({}, element['rowStyle'].style), rc._constrain.style);
                        }
                        this.constrainedRows.add(element);
                    }
                }
            });
        });
    }
    updateRowConstrains() {
        this.constrainedRows = new Set();
        const source = this.dataSource.data;
        source.forEach((element) => {
            this.rowConstrains.forEach((rc) => {
                const value = element[rc.name];
                if (rc._constrain.trigger(value)) {
                    if (rc._constrain.enable) {
                        if (!element['rowStyle']) {
                            Object.defineProperty(element, 'rowStyle', {
                                configurable: true,
                                enumerable: false,
                                value: { style: rc._constrain.style },
                                writable: true,
                            });
                        }
                        else if (element['rowStyle']) {
                            element['rowStyle'].style = Object.assign(Object.assign({}, element['rowStyle'].style), rc._constrain.style);
                        }
                        this.constrainedRows.add(element);
                    }
                }
            });
        });
    }
    hasConstrain(propertyKey, value) {
        let result = false;
        if (this.rowConstrains.length != 0) {
        }
        return result;
    }
    setColumns() {
        var _a;
        const columnsMetadata = Reflect.getMetadata('columnsMetadata', this.dataType);
        let columnGroups = new ColumnGroups(0);
        if (columnsMetadata != undefined) {
            this.columns = columnsMetadata.map((c, i) => {
                var _a;
                let column = new Column(c.propertyKey, c.propertyKey, ColumnType.STRING, c.metadata.order);
                column.visible =
                    c.metadata.visible == undefined ? true : c.metadata.visible;
                column.name = c.metadata.columnName || c.propertyKey;
                column.type = c.metadata.type || ColumnType.STRING;
                column.format = c.metadata.format || undefined;
                column.contentAlign = c.metadata.contentAlign || undefined;
                column.enumTypeAsociation =
                    c.metadata.enumTypeAsociation || undefined;
                const str = (_a = c.metadata.columnGroup) === null || _a === void 0 ? void 0 : _a.name;
                if (str) {
                    if (columnGroups.groupColumns.filter((x) => x.name == str).length == 0) {
                        let newColGroup = new GroupColumn(str);
                        newColGroup.addColumn(column);
                        columnGroups.groupColumns.push(newColGroup);
                    }
                    else {
                        columnGroups.groupColumns
                            .filter((x) => x.name == str)[0]
                            .addColumn(column);
                    }
                }
                return column;
            });
            this.columns.sort((a, b) => {
                return a.order - b.order;
            });
        }
        this.displayedColumns = new DisplayedColumns(this.columns, this.selection, ((_a = this.tableConfigurations) === null || _a === void 0 ? void 0 : _a.actionsColumn) != undefined);
        this.displayedColumns.columnGroups = columnGroups;
        this.displayedColumns.updateGroups();
    }
    isAllSelected() {
        const numSelected = this.selectedRows.size;
        const numRows = this.dataSource.data.length;
        return numSelected == numRows && numRows != 0;
    }
    masterToggle() {
        this.isAllSelected()
            ? this.selectedRows.clear()
            : this.dataSource.data.forEach((row) => this.selectedRows.add(row));
    }
    selectionToogle(state, row) {
        var _a;
        if (state) {
            this.selectedRows.add(row);
        }
        else {
            if (this.selectedRows.has(row))
                this.selectedRows.delete(row);
        }
        if ((_a = this.tableActionsConfig) === null || _a === void 0 ? void 0 : _a.actions) {
            this.tableActionsConfig.updatePermormableState(this.selectedRows);
        }
    }
    changeConstrainState(value, data, field, isStyle = true) {
        if (isStyle && field && field != '') {
            data.style[field] = value;
        }
        if (!isStyle) {
            switch (field) {
                case 'number-type':
                    data.type = parseInt(value.value);
                    break;
                case 'number-value':
                case 'number-value1':
                    data.values[0] = parseInt(value.target.value);
                    break;
                case 'number-value2':
                    data.values[1] = parseInt(value.target.value);
                    break;
            }
        }
        this.updateRowConstrains();
    }
    addConstrain($event) {
        this.fieldConstrians.push($event);
        this.updateFieldsToRowsConstrains();
        this.updateRowConstrains();
    }
    updateVisibility() {
        this.updateFieldsToRowsConstrains();
        this.updateRowConstrains();
    }
    removeConstrain(constrain) {
        this.fieldConstrians = this.fieldConstrians.filter((x) => x != constrain);
        this.updateVisibility();
    }
    tableDrop(event) {
        moveItemInArray(this.displayedColumns.columnNames, event.previousIndex + 1, event.currentIndex + 1);
    }
    onRowActionClick(row, action) {
        if (action.actionResult.willUpdateRow ||
            action.actionResult.willDeleteRow) {
            row.processing = true;
            this.singleActionOutput.emit({
                operation: action,
                data: row,
            });
        }
    }
    updateRow(row, newRow) {
        let indx = this.dataSource.data.indexOf(row);
        if (newRow) {
            this.dataSource.data[indx] = newRow;
            this.dataSource.data[indx].processing = false;
            this.selectedRows.delete(this.dataSource.data[indx]);
        }
        else {
            this.dataSource.data.splice(indx, 1);
            row.processing = false;
        }
        this.selectedRows.delete(row);
        this.dataSource._updateChangeSubscription();
        this.updateVisibility();
    }
    performFooterAction() {
        var _a, _b, _c, _d;
        if ((_b = (_a = this.tableConfigurations) === null || _a === void 0 ? void 0 : _a.footerAction) === null || _b === void 0 ? void 0 : _b.actionResult.nonObservableAction) {
            (_d = (_c = this.tableConfigurations) === null || _c === void 0 ? void 0 : _c.footerAction) === null || _d === void 0 ? void 0 : _d.actionResult.nonObservableAction();
        }
    }
    performRowActionConfirmation(action, row, confirmation) {
        this._confirmation = 'single';
        this.rowConfirmation = {
            confirmationData: confirmation,
            row: row,
            action: action,
        };
        if (this.drawer) {
            this.drawer.open();
        }
    }
    onGeneralActionClick(operation) {
        this.performGeneralAction(operation);
    }
    performGeneralAction(operation) {
        this.multipleActionOutput.emit({
            operation: operation,
            data: this.selectedRows,
        });
        if (operation.mustLockRows) {
            this.lockSelectedRows(this.selectedRows);
        }
    }
    unLockRow(row) {
        row.processing = false;
    }
    lockSelectedRows(rows) {
        rows.forEach((row) => {
            row.processing = true;
        });
    }
    unLockSelectedRows(rows) {
        rows.forEach((row) => {
            row.processing = false;
        });
    }
    performGeneralActionConfirmation(operation) {
        this._confirmation = 'multiple';
        this.generalConfirmation = {
            confirmationData: operation.confirmation,
            action: operation,
        };
        if (this.drawer) {
            this.drawer.open();
        }
    }
    applyFilter() {
        const filterValue = this.filteringStringFormControl.value;
        this.dataSource.filter = filterValue.trim().toLowerCase();
    }
    setFilterSelection() {
        if (this.filteringColumnsFormControl.value &&
            this.filteringColumnsFormControl.value.length != 0) {
            this.dataSource.filterPredicate = (data, filter) => {
                let result = false;
                result = this.filteringColumnsFormControl.value.some((field) => {
                    return data[field].toString().toLowerCase().indexOf(filter) !== -1;
                });
                return result;
            };
        }
        else {
            this.dataSource.filterPredicate = this.defaultFilterPredicate;
        }
        this.applyFilter();
    }
    /* DragAndDrop */
    toogleDragAndDrop() {
        this.draganddrop = !this.draganddrop;
    }
    drop(event) {
        const rowIndex = event.currentIndex + this.paginator.pageIndex * this.paginator.pageSize;
        const element = event.container.data[rowIndex];
        console.log(element);
        /* if (event.previousContainer === event.container) {
          moveItemInArray(
            event.container.data,
            event.previousIndex,
            event.currentIndex
          );
        } else {
          transferArrayItem(
            event.previousContainer.data,
            event.container.data,
            event.previousIndex,
            event.currentIndex
          );
        } */
    }
}
LitotableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LitotableComponent, deps: [{ token: i1.LiveAnnouncer }], target: i0.ɵɵFactoryTarget.Component });
LitotableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LitotableComponent, selector: "lito-table", inputs: { inputSource: ["source", "inputSource"], dataType: ["type", "dataType"], tableActionsConfig: "tableActionsConfig", selection: "selection", tableConfigurations: ["configurations", "tableConfigurations"], fieldConstrians: "fieldConstrians" }, outputs: { multipleActionOutput: "multipleActionOutput", singleActionOutput: "singleActionOutput" }, viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true }, { propertyName: "sort", first: true, predicate: MatSort, descendants: true }, { propertyName: "drawer", first: true, predicate: MatDrawer, descendants: true }], ngImport: i0, template: "<!-- Operations -->\n<!-- EXPANDABLE -->\n<mat-accordion\n  class=\"table-operations\"\n  *ngIf=\"tableActionsConfig && tableActionsConfig.expandable\"\n>\n  <mat-expansion-panel hideToggle>\n    <mat-expansion-panel-header>\n      <mat-panel-title style=\"align-items: center\">\n        Operaciones\n      </mat-panel-title>\n    </mat-expansion-panel-header>\n    <div class=\"operation-buttons-container\" *ngIf=\"tableActionsConfig\">\n      <div *ngFor=\"let operation of tableActionsConfig.actions\">\n        <div class=\"table-bottom-container\">\n          <!-- (selectedRows.size == 0 && operation.mustHaveOneSelected) ||\n              (selectedRows.size != 1 && operation.scope == 1) -->\n          <div\n            [matTooltipDisabled]=\"operation.performable.state\"\n            matTooltip=\"{{ operation.performable.tooltip }}\"\n          >\n            <button\n              [disabled]=\"!operation.performable.state\"\n              mat-stroked-button\n              class=\"general-action\"\n              (click)=\"\n                operation.confirmation\n                  ? performGeneralActionConfirmation(operation)\n                  : performGeneralAction(operation)\n              \"\n            >\n              <mat-icon\n                *ngIf=\"operation?.icon\"\n                [ngStyle]=\"{\n                  color:\n                    (!operation.performable.state\n                      ? 'gray'\n                      : operation?.color) || 'currentColor'\n                }\"\n                >{{ operation.icon }}</mat-icon\n              >\n              {{ operation.content }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </mat-expansion-panel>\n</mat-accordion>\n\n<!-- NOT EXPANDABLE -->\n<div\n  class=\"table-operations mat-elevation-z2 not-expandable-operatios\"\n  *ngIf=\"tableActionsConfig && !tableActionsConfig.expandable\"\n>\n  <div class=\"not-expandable-actions-container\">\n    <div class=\"operation-buttons-container\" *ngIf=\"tableActionsConfig\">\n      <div *ngFor=\"let operation of tableActionsConfig.actions\">\n        <div class=\"table-bottom-container\">\n          <!-- (selectedRows.size == 0 && operation.mustHaveOneSelected) ||\n              (selectedRows.size != 1 && operation.scope == 1) -->\n          <div\n            [matTooltipDisabled]=\"operation.performable.state\"\n            matTooltip=\"{{ operation.performable.tooltip }}\"\n          >\n            <button\n              [disabled]=\"!operation.performable.state\"\n              mat-stroked-button\n              class=\"general-action\"\n              (click)=\"\n                operation.confirmation\n                  ? performGeneralActionConfirmation(operation)\n                  : performGeneralAction(operation)\n              \"\n            >\n              <mat-icon\n                *ngIf=\"operation?.icon\"\n                [ngStyle]=\"{\n                  color:\n                    (!operation.performable.state\n                      ? 'gray'\n                      : operation?.color) || 'currentColor'\n                }\"\n                >{{ operation.icon }}</mat-icon\n              >\n              {{ operation.content }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!-- Table -->\n<div class=\"litotable-main-container\">\n  <div class=\"litotable-container mat-elevation-z4\">\n    <!-- Toolbar actions -->\n    <div class=\"table-top-container\">\n      <button\n        mat-icon-button\n        aria-label=\"Drag & Drop\"\n        (click)=\"$event.stopPropagation(); toogleDragAndDrop()\"\n      >\n        <mat-icon [ngStyle]=\"{ color: draganddrop ? 'red' : 'currentColor' }\"\n          >open_with</mat-icon\n        >\n      </button>\n\n      <button\n        mat-icon-button\n        [matMenuTriggerFor]=\"export\"\n        aria-label=\"Exportar\"\n        (click)=\"$event.stopPropagation()\"\n      >\n        <mat-icon>download</mat-icon>\n      </button>\n\n      <button\n        mat-icon-button\n        [matMenuTriggerFor]=\"columns\"\n        aria-label=\"Columnas\"\n        (click)=\"$event.stopPropagation()\"\n      >\n        <mat-icon>view_column</mat-icon>\n      </button>\n\n      <button\n        mat-icon-button\n        [matMenuTriggerFor]=\"constrains\"\n        aria-label=\"Constrains\"\n        (click)=\"$event.stopPropagation()\"\n      >\n        <mat-icon>brush</mat-icon>\n      </button>\n    </div>\n    <div class=\"table-container\">\n      <!-- Filter -->\n      <div class=\"filter-container\">\n        <mat-form-field appearance=\"standard\">\n          <mat-label>Columnas a filtrar</mat-label>\n          <mat-select\n            (selectionChange)=\"setFilterSelection()\"\n            [formControl]=\"filteringColumnsFormControl\"\n            multiple\n          >\n            <mat-option\n              *ngFor=\"let columna of displayedColumns.columns\"\n              [value]=\"columna.propertyKey\"\n              >{{ columna.name }}</mat-option\n            >\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field appearance=\"standard\" class=\"filter-selector\">\n          <mat-label>Filter</mat-label>\n          <input\n            [formControl]=\"filteringStringFormControl\"\n            matInput\n            (keyup)=\"applyFilter()\"\n            placeholder=\"Ex. ium\"\n            #input\n          />\n        </mat-form-field>\n      </div>\n      <mat-drawer-container class=\"example-container\" [hasBackdrop]=\"true\">\n        <mat-drawer #drawer mode=\"over\" position=\"end\">\n          <ng-container *ngTemplateOutlet=\"sidenavMenu\"></ng-container>\n        </mat-drawer>\n        <mat-drawer-content>\n          <div *ngIf=\"dataSource\" class=\"table-responsive\">\n            <!-- Table -->\n            <table\n              mat-table\n              [dataSource]=\"dataSource\"\n              matSort\n              (matSortChange)=\"announceSortChange($event)\"\n              cdkDropList\n              [cdkDropListData]=\"dataSource.data\"\n              (cdkDropListDropped)=\"drop($event)\"\n              cdkDropListSortingDisabled\n            >\n              <!-- Columna de seleccion -->\n              <ng-container matColumnDef=\"selection\">\n                <th mat-header-cell *matHeaderCellDef>\n                  <mat-checkbox\n                    (change)=\"masterToggle()\"\n                    [indeterminate]=\"\n                      this.selectedRows.size != 0 && !isAllSelected()\n                    \"\n                    [checked]=\"isAllSelected()\"\n                  >\n                  </mat-checkbox>\n                </th>\n                <td\n                  mat-cell\n                  *matCellDef=\"let row\"\n                  style=\"background-color: rgba(255, 255, 255, 1)\"\n                >\n                  <mat-checkbox\n                    (click)=\"$event.stopPropagation()\"\n                    (change)=\"selectionToogle($event.checked, row)\"\n                    [checked]=\"selectedRows.has(row)\"\n                    [disabled]=\"row.processing\"\n                  >\n                  </mat-checkbox>\n                </td>\n              </ng-container>\n\n              <!-- Resto de columnas -->\n              <ng-container\n                *ngFor=\"let column of displayedColumns.columns\"\n                matColumnDef=\"{{ column.name }}\"\n              >\n                <!-- Column Header -->\n                <th\n                  mat-header-cell\n                  *matHeaderCellDef\n                  mat-sort-header=\"{{ column.propertyKey }}\"\n                  sortActionDescription=\"Sort by {{ column.propertyKey }}\"\n                  [class.header-borders]=\"tableConfigurations?.headerBorders\"\n                >\n                  {{ column.name }}\n                </th>\n                <!-- Column Data -->\n                <td\n                  mat-cell\n                  *matCellDef=\"let element\"\n                  #litotableTd\n                  [class.cell-borders]=\"tableConfigurations?.headerBorders\"\n                >\n                  <div\n                    #content\n                    style=\"transition: 0.3s all\"\n                    [class.cell-align-left]=\"\n                      column.contentAlign && column.contentAlign == 1\n                    \"\n                    [class.cell-align-center]=\"\n                      column.contentAlign && column.contentAlign == 2\n                    \"\n                    [class.cell-align-right]=\"\n                      column.contentAlign && column.contentAlign == 3\n                    \"\n                    [ngStyle]=\"\n                      litotableTd.parentElement?.style?.color\n                        ? { color: litotableTd.parentElement?.style?.color }\n                        : {}\n                    \"\n                  >\n                    <span *ngIf=\"column.type == columnTypes.STRING\">\n                      {{ element[column.propertyKey] }}\n                    </span>\n                    <span *ngIf=\"column.type == columnTypes.INTEGER\">\n                      {{ element[column.propertyKey] | number: \"1.0-0\" }}\n                    </span>\n                    <span *ngIf=\"column.type == columnTypes.FLOAT\">\n                      {{ element[column.propertyKey] | number: \"1.2-4\" }}\n                    </span>\n                    <span *ngIf=\"column.type == columnTypes.DATE\">\n                      {{\n                        element[column.propertyKey]\n                          | date: (column.format ? column.format : \"short\")\n                      }}\n                    </span>\n                    <span *ngIf=\"column.type == columnTypes.CURRENCY\">\n                      {{ element[column.propertyKey] | currency }}\n                    </span>\n                    <span *ngIf=\"column.type == columnTypes.CUIT\">\n                      {{ element[column.propertyKey] | cuit: \"-\" }}\n                    </span>\n                    <span *ngIf=\"column.type == columnTypes.PHONE\">\n                      {{\n                        element[column.propertyKey]\n                          | phone: (column.format ? column.format : undefined)\n                      }}\n                    </span>\n                    <span *ngIf=\"column.type == columnTypes.ENUM\">\n                      <span\n                        *ngFor=\"let asociation of column.enumTypeAsociation\"\n                      >\n                        <mat-icon\n                          *ngIf=\"asociation.key == element[column.propertyKey]\"\n                          matTooltip=\"{{ asociation.tooltip }}\"\n                          >{{ asociation.icon }}</mat-icon\n                        >\n                      </span>\n                    </span>\n                  </div>\n                </td>\n              </ng-container>\n\n              <!-- Columna de Acciones -->\n              <ng-container\n                *ngIf=\"tableConfigurations?.actionsColumn\"\n                matColumnDef=\"actions\"\n              >\n                <th\n                  mat-header-cell\n                  *matHeaderCellDef\n                  [class.header-borders]=\"tableConfigurations?.headerBorders\"\n                  class=\"actions-th\"\n                >\n                  Acciones\n                </th>\n                <td\n                  mat-cell\n                  *matCellDef=\"let row\"\n                  [class.cell-borders]=\"tableConfigurations?.headerBorders\"\n                  style=\"padding: 0\"\n                  class=\"actions-td\"\n                >\n                  <div>\n                    <div\n                      *ngFor=\"let action of tableConfigurations?.actionsColumn\"\n                    >\n                      <button\n                        [disabled]=\"row.processing\"\n                        *ngIf=\"action.confirmation\"\n                        mat-icon-button\n                        matTooltip=\"{{ action.tooltip }}\"\n                        (click)=\"\n                          performRowActionConfirmation(\n                            action,\n                            row,\n                            action.confirmation\n                          )\n                        \"\n                      >\n                        <mat-icon\n                          [style]=\"{\n                            color: row.processing ? 'lightgray' : action.color\n                          }\"\n                          >{{ action.icon }}</mat-icon\n                        >\n                      </button>\n                      <button\n                        [disabled]=\"row.processing\"\n                        *ngIf=\"!action.confirmation\"\n                        mat-icon-button\n                        matTooltip=\"{{ action.tooltip }}\"\n                        (click)=\"onRowActionClick(row, action)\"\n                      >\n                        <mat-icon\n                          [style]=\"{\n                            color: row.processing ? 'lightgray' : action.color\n                          }\"\n                          >{{ action.icon }}</mat-icon\n                        >\n                      </button>\n                    </div>\n                  </div>\n                </td>\n              </ng-container>\n\n              <!-- Columnas de agrupacion -->\n              <ng-container matColumnDef=\"empty-group\">\n                <th *matHeaderCellDef class=\"group-header-empty\"></th>\n              </ng-container>\n              <ng-container\n                *ngFor=\"let col of displayedColumns.columnGroups.groupColumns\"\n                matColumnDef=\"{{ col.name }}\"\n              >\n                <th\n                  mat-header-cell\n                  *matHeaderCellDef\n                  [attr.colspan]=\"col.colspan\"\n                >\n                  {{ col.name }}\n                </th>\n              </ng-container>\n              <tr\n                class=\"group-header\"\n                mat-header-row\n                *matHeaderRowDef=\"displayedColumns.columnGroups.displayNames\"\n              ></tr>\n\n              <!-- Encabezados de columnas -->\n              <tr\n                mat-header-row\n                *matHeaderRowDef=\"displayedColumns.columnNames\"\n              ></tr>\n\n              <!-- Formato condicional de filas -->\n              <tr\n                cdkDrag\n                [cdkDragDisabled]=\"!draganddrop\"\n                mat-row\n                [class.mat-row-selected]=\"selectedRows.has(row)\"\n                [class.mat-row-selected-borders]=\"\n                  selectedRows.has(row) &&\n                  tableConfigurations?.selectionStyle == 1\n                \"\n                [class.mat-row-selected-shadow]=\"\n                  selectedRows.has(row) &&\n                  tableConfigurations?.selectionStyle == 2\n                \"\n                [class.mat-row-borders]=\"tableConfigurations?.hoverStyle == 1\"\n                [class.mat-row-shadow]=\"tableConfigurations?.hoverStyle == 2\"\n                style=\"transition: 0.3s background-color\"\n                [ngStyle]=\"constrainedRows.has(row) ? row.rowStyle.style : ''\"\n                *matRowDef=\"let row; columns: displayedColumns.columnNames\"\n                [class.mat-row-processing]=\"row.processing\"\n              >\n                <div *cdkDragPlaceholder>placeholder</div>\n              </tr>\n\n              <!-- Mensaje por defecto en caso de no haber datos o se este fetcheando -->\n              <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell\" colspan=\"4\">\n                  {{ fetching ? \"fetching data\" : \"No data found\" }}\n                </td>\n              </tr>\n            </table>\n          </div>\n        </mat-drawer-content>\n      </mat-drawer-container>\n\n      <!-- Footer action button -->\n      <div class=\"table-bottom-container\">\n        <button\n          mat-stroked-button\n          class=\"footercell\"\n          (click)=\"performFooterAction()\"\n        >\n          <mat-icon\n            *ngIf=\"tableConfigurations?.footerAction?.icon\"\n            [ngStyle]=\"{\n              color: tableConfigurations?.footerAction?.color || 'currentColor'\n            }\"\n            >{{ tableConfigurations?.footerAction?.icon }}</mat-icon\n          >\n          {{ tableConfigurations?.footerAction?.content }}\n        </button>\n      </div>\n    </div>\n\n    <!-- Paginator -->\n    <div class=\"table-bottom-container\">\n      <mat-paginator\n        [pageSizeOptions]=\"tableConfigurations?.paginationSizes || [5, 10, 20]\"\n        showFirstLastButtons\n        aria-label=\"Select page\"\n      >\n      </mat-paginator>\n    </div>\n\n    <!-- Progressbar -->\n    <mat-progress-bar\n      [mode]=\"fetching ? 'indeterminate' : 'determinate'\"\n    ></mat-progress-bar>\n  </div>\n</div>\n\n<!-- Export Menu -->\n<mat-menu #export=\"matMenu\" xPosition=\"before\">\n  <div\n    mat-menu-item\n    style=\"text-align: center\"\n    (click)=\"$event.stopPropagation()\"\n    disabled=\"true\"\n  >\n    Exportar\n  </div>\n</mat-menu>\n\n<!-- Columns Selector Menu -->\n<mat-menu #columns=\"matMenu\" xPosition=\"before\">\n  <div\n    mat-menu-item\n    style=\"text-align: center\"\n    (click)=\"$event.stopPropagation()\"\n    disabled=\"true\"\n  >\n    Columnas\n  </div>\n  <mat-divider></mat-divider>\n\n  <div\n    *ngFor=\"let column of displayedColumns.columns\"\n    mat-menu-item\n    (click)=\"$event.stopPropagation()\"\n  >\n    <mat-slide-toggle\n      color=\"primary\"\n      (click)=\"$event.stopPropagation()\"\n      (change)=\"displayedColumns.changeColumnVisivility(column)\"\n      [checked]=\"column.visible\"\n    >\n      {{ column.name }}\n    </mat-slide-toggle>\n  </div>\n  <mat-divider></mat-divider>\n  <div\n    *ngFor=\"let group of displayedColumns.columnGroups.groupColumns\"\n    mat-menu-item\n    (click)=\"$event.stopPropagation()\"\n  >\n    <mat-slide-toggle\n      color=\"accent\"\n      (click)=\"$event.stopPropagation()\"\n      (change)=\"\n        group.toogleVisibbility($event.checked);\n        displayedColumns.updateVisivility()\n      \"\n      [checked]=\"group.checked\"\n    >\n      {{ group.name }}\n    </mat-slide-toggle>\n  </div>\n  <button\n    mat-menu-item\n    style=\"text-align: center\"\n    (click)=\"displayedColumns.allVisible(); $event.stopPropagation()\"\n  >\n    Todas\n  </button>\n</mat-menu>\n\n<!-- Constrains Menu -->\n<mat-menu\n  #constrains=\"matMenu\"\n  xPosition=\"before\"\n  style=\"padding: 0.5rem !important\"\n>\n  <div\n    mat-menu-item\n    style=\"text-align: center\"\n    (click)=\"$event.stopPropagation()\"\n    disabled=\"true\"\n  >\n    Estilos\n  </div>\n  <div\n    mat-menu-item\n    disableRipple=\"true\"\n    *ngFor=\"let constr of fieldConstrians\"\n    (click)=\"$event.stopPropagation()\"\n    [style]=\"{\n      display: 'flex',\n      'align-items': 'center',\n      'justify-items': 'center',\n      color: constr.constrain.style['color'],\n      'background-color': constr.constrain.style['background-color'],\n      'text-align': 'center'\n    }\"\n  >\n    <span style=\"flex-grow: 1; text-align: center\">{{\n      constr.constrainName\n    }}</span>\n    <button\n      mat-icon-button\n      matTooltip=\"remove\"\n      style=\"justify-self: flex-end; margin-left: 1rem\"\n      [matMenuTriggerFor]=\"constrainDeletionConfirm\"\n      [matMenuTriggerData]=\"{ data: constr }\"\n    >\n      <mat-icon style=\"margin: auto\">delete</mat-icon>\n    </button>\n    <button mat-icon-button style=\"justify-self: flex-end\">\n      <mat-icon style=\"margin: auto\" matTooltip=\"hide\">edit</mat-icon>\n    </button>\n    <button\n      mat-icon-button\n      style=\"justify-self: flex-end\"\n      (click)=\"\n        constr.constrain.enable = !constr.constrain.enable; updateVisibility()\n      \"\n    >\n      <mat-icon style=\"margin: auto\" matTooltip=\"hide\">{{\n        constr.constrain.enable ? \"visibility\" : \"visibility_off\"\n      }}</mat-icon>\n    </button>\n  </div>\n\n  <!-- Constrain Creator -->\n  <div\n    mat-menu-item\n    style=\"text-align: center\"\n    (click)=\"$event.stopPropagation()\"\n  >\n    <litotable-constrain-creator\n      [columns]=\"displayedColumns.columns\"\n      (result-constrain)=\"addConstrain($event)\"\n      ><mat-icon style=\"margin: auto\"\n        >add_circle</mat-icon\n      ></litotable-constrain-creator\n    >\n  </div>\n</mat-menu>\n\n<mat-menu #constrainDeletionConfirm=\"matMenu\" xPosition=\"before\">\n  <ng-template matMenuContent let-constrain=\"data\">\n    <button\n      mat-menu-item\n      (click)=\"removeConstrain(constrain)\"\n      style=\"color: red; font-weight: 500\"\n    >\n      confirm remove\n    </button>\n  </ng-template>\n</mat-menu>\n\n<mat-menu #constrain=\"matMenu\" xPosition=\"before\">\n  <ng-template matMenuContent let-data=\"data\">\n    <mat-card\n      (click)=\"$event.stopPropagation()\"\n      (keypress)=\"$event.stopPropagation()\"\n    >\n      <mat-card-content\n        (click)=\"$event.stopPropagation()\"\n        (keypress)=\"$event.stopPropagation()\"\n        class=\"constrain-mat-content\"\n      >\n        <div\n          class=\"constrain-mat-content-dual\"\n          (click)=\"$event.stopPropagation()\"\n          (keypress)=\"$event.stopPropagation()\"\n        >\n          <app-lito-color-picker\n            [colors]=\"tableConfigurations?.rowStyleColors\"\n            (result)=\"\n              changeConstrainState($event, data.constrain, 'background-color')\n            \"\n            content=\"Background\"\n          ></app-lito-color-picker>\n          <app-lito-color-picker\n            [colors]=\"tableConfigurations?.rowStyleColors\"\n            (result)=\"changeConstrainState($event, data.constrain, 'color')\"\n            content=\"Foreground\"\n          ></app-lito-color-picker>\n        </div>\n        <div\n          [style]=\"{\n            color: data.constrain.style['color'],\n            'background-color': data.constrain.style['background-color'],\n            'margin-bottom': '1rem',\n            'text-align': 'center',\n            padding: '0.5rem 0',\n            width: '100%'\n          }\"\n        >\n          {{ data.constrain.values[0] }}\n        </div>\n        <mat-button-toggle-group\n          name=\"fontStyle\"\n          aria-label=\"Font Style\"\n          (click)=\"$event.stopPropagation()\"\n          value=\"{{ data.constrain.type }}\"\n          (change)=\"\n            changeConstrainState($event, data.constrain, 'number-type', false)\n          \"\n        >\n          <mat-button-toggle value=\"1\">=</mat-button-toggle>\n          <mat-button-toggle value=\"2\">{{ \"\\>\" }}</mat-button-toggle>\n          <mat-button-toggle value=\"3\">{{ \"\\<\" }}</mat-button-toggle>\n          <mat-button-toggle value=\"4\">{{ \"\\<\\>\" }}</mat-button-toggle>\n        </mat-button-toggle-group>\n        <div\n          *ngIf=\"data.constrain.type != numberConstrainType.BETWEEN\"\n          (click)=\"$event.stopPropagation()\"\n          (keydown)=\"$event.stopPropagation()\"\n          (keypress)=\"$event.stopPropagation()\"\n          style=\"display: flex; justify-content: space-between\"\n        >\n          <mat-form-field\n            style=\"width: 100%\"\n            appearance=\"fill\"\n            (click)=\"$event.stopPropagation()\"\n            (keypress)=\"$event.stopPropagation()\"\n            (keydown)=\"$event.stopPropagation()\"\n          >\n            <mat-label (click)=\"$event.stopPropagation()\">VALOR</mat-label>\n            <input\n              type=\"number\"\n              step=\"100\"\n              (keydown)=\"$event.stopPropagation()\"\n              (keypress)=\"$event.stopPropagation()\"\n              (click)=\"$event.stopPropagation()\"\n              (change)=\"\n                $event.stopPropagation();\n                changeConstrainState(\n                  $event,\n                  data.constrain,\n                  'number-value',\n                  false\n                )\n              \"\n              (keyup)=\"\n                $event.stopPropagation();\n                changeConstrainState(\n                  $event,\n                  data.constrain,\n                  'number-value',\n                  false\n                )\n              \"\n              matInput\n              placeholder=\"\"\n              value=\"{{ data.constrain.values[0] }}\"\n            />\n          </mat-form-field>\n        </div>\n        <!-- BETWEEN -->\n        <div\n          *ngIf=\"data.constrain.type == numberConstrainType.BETWEEN\"\n          (click)=\"$event.stopPropagation()\"\n          (keypress)=\"$event.stopPropagation()\"\n          (keydown)=\"$event.stopPropagation()\"\n          style=\"max-width: fit-content; display: flow-root\"\n        >\n          <mat-form-field\n            style=\"max-width: 45%; float: left\"\n            appearance=\"fill\"\n            (click)=\"$event.stopPropagation()\"\n            (keypress)=\"$event.stopPropagation()\"\n            (keydown)=\"$event.stopPropagation()\"\n          >\n            <mat-label (click)=\"$event.stopPropagation()\">DESDE</mat-label>\n            <input\n              type=\"number\"\n              (click)=\"$event.stopPropagation()\"\n              (keydown)=\"$event.stopPropagation()\"\n              (keypress)=\"$event.stopPropagation()\"\n              (change)=\"\n                changeConstrainState(\n                  $event,\n                  data.constrain,\n                  'number-value1',\n                  false\n                )\n              \"\n              (keyup)=\"\n                changeConstrainState(\n                  $event,\n                  data.constrain,\n                  'number-value1',\n                  false\n                )\n              \"\n              matInput\n              placeholder=\"\"\n              value=\"{{ data.constrain.values[0] }}\"\n            />\n          </mat-form-field>\n          <mat-form-field\n            style=\"max-width: 45%; float: right\"\n            appearance=\"fill\"\n            (click)=\"$event.stopPropagation()\"\n            (keypress)=\"$event.stopPropagation()\"\n            (keydown)=\"$event.stopPropagation()\"\n          >\n            <mat-label\n              (click)=\"$event.stopPropagation()\"\n              (keypress)=\"$event.stopPropagation()\"\n              >HASTA</mat-label\n            >\n            <input\n              type=\"number\"\n              step=\"100\"\n              (change)=\"\n                changeConstrainState(\n                  $event,\n                  data.constrain,\n                  'number-value2',\n                  false\n                )\n              \"\n              (click)=\"$event.stopPropagation()\"\n              (keydown)=\"$event.stopPropagation()\"\n              (keypress)=\"$event.stopPropagation()\"\n              (keyup)=\"\n                changeConstrainState(\n                  $event,\n                  data.constrain,\n                  'number-value2',\n                  false\n                )\n              \"\n              matInput\n              placeholder=\"\"\n              value=\"{{ data.constrain.values[1] }}\"\n            />\n          </mat-form-field>\n        </div>\n      </mat-card-content>\n    </mat-card>\n  </ng-template>\n</mat-menu>\n\n<!-- sidenav-menu -->\n<ng-template #sidenavMenu>\n  <div style=\"padding: 1rem\">\n    <h2>\n      <span *ngIf=\"_confirmation == 'single'\">\n        {{\n          rowConfirmation\n            ? rowConfirmation?.confirmationData?.title\n            : \"Confirmacion\"\n        }}\n      </span>\n      <span *ngIf=\"_confirmation == 'multiple'\">\n        {{\n          generalConfirmation\n            ? generalConfirmation?.confirmationData?.title\n            : \"Confirmacion\"\n        }}\n      </span>\n    </h2>\n    <p>\n      <span *ngIf=\"_confirmation == 'single'\">\n        {{ rowConfirmation?.confirmationData?.content }}\n      </span>\n      <span *ngIf=\"_confirmation == 'multiple'\">\n        {{ generalConfirmation?.confirmationData?.content }}\n      </span>\n    </p>\n\n    <button\n      mat-raised-button\n      color=\"primary\"\n      style=\"margin-right: 0.5rem\"\n      (click)=\"\n        drawer.toggle();\n        _confirmation == 'single'\n          ? onRowActionClick(rowConfirmation?.row, rowConfirmation!.action)\n          : onGeneralActionClick(generalConfirmation!.action)\n      \"\n    >\n      accept\n    </button>\n    <button mat-raised-button color=\"warn\" (click)=\"drawer.toggle()\">\n      cancel\n    </button>\n  </div>\n</ng-template>\n", styles: [".litotable-main-container{width:100%;display:flex;flex-direction:row}.litotable-container{width:100%}.litotable-operations{width:0%;transition:.5s all}.litotable-operations.growed{width:50%;margin-left:1rem}.not-expandable-operatios{margin:1rem 0;border-radius:4px;padding:3px 24px}table{width:100%;max-width:100%;max-height:100%}.table-responsive{overflow:auto;min-height:.01%}.table-container{padding:1rem 1rem 0;overflow:hidden}.mat-cell>div{padding:0 10px!important;width:max-content!important}.mat-header-row .mat-header-cell{padding:0 .5rem}.mat-row{transition:.3s all}.mat-header-row .mat-header-cell.header-borders{border-right:1px solid rgba(0,0,0,.12)}.mat-header-row .mat-header-cell.header-borders:nth-child(2){border-left:1px solid rgba(0,0,0,.12)}.mat-row .mat-cell.cell-borders{border-right:1px solid rgba(0,0,0,.12)}.mat-row .mat-cell.cell-borders:nth-child(2){border-left:1px solid rgba(0,0,0,.12)}.mat-row .mat-cell{border-bottom:1px solid transparent;border-top:1px solid transparent}.mat-row.mat-row-borders:hover .mat-cell,.mat-row.mat-row-selected-borders .mat-cell{border-bottom:1px dashed currentColor;border-top:1px dashed currentColor}.mat-row.mat-row-shadow:hover .mat-cell,.mat-row.mat-row-selected-shadow .mat-cell{background-color:#0000000d}.row-is-selected{filter:brightness(1.2) contrast(.8)}.mat-column-selection{overflow:initial}.mat-header-cell{border-top-width:1px;border-top-color:#0000001f;background-color:#00000005;border-top-style:solid}th.mat-column-selection.mat-header-cell:first-of-type,td.mat-column-selection.mat-cell:first-of-type,td.mat-column-selection.mat-footer-cell:first-of-type{padding-left:10px;padding-right:10px;width:20px}.table-top-container,.table-bottom-container{display:flex}.table-top-container{justify-content:flex-end;padding:.5rem .5rem 0}.not-expandable-actions-container{padding:16px 0}.table-bottom-container mat-paginator{flex-grow:1}.table-operations mat-expansion-panel{margin:1rem 0}::ng-deep .column-content-alignment-1>div{text-align:left}::ng-deep .column-content-alignment-2>div{text-align:center}::ng-deep .column-content-alignment-3>div{text-align:right}.operation-buttons-container{display:flex;flex-direction:row;justify-content:flex-start}.operation-buttons-container>div{margin:0 .5rem}.constrain-mat-content>*{width:100%}.constrain-mat-content>mat-button-toggle-group{margin-bottom:1rem}.constrain-mat-content>mat-button-toggle-group>*{width:25%}.constrain-mat-content .constrain-mat-content-dual{display:flex;width:100%;justify-content:space-between;margin-bottom:1rem}.constrain-mat-content .constrain-mat-content-dual>*{width:45%}.group-header{height:2rem}.group-header>*{border-bottom:none;border-right:1px solid rgba(0,0,0,.12);border-left:1px solid rgba(0,0,0,.12);text-align:center}.group-header-empty{border-right:none!important;border-left:none!important}.cdk-drag-preview{box-sizing:border-box;padding:1rem;position:relative}.cdk-drag-preview:after{content:\"\";position:absolute;top:0;bottom:0;left:5px;right:5px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-placeholder{color:transparent;position:relative;transition:transform .25s cubic-bezier(0,0,.2,1)}.actions-td,.actions-th{position:sticky;right:0;border-left:1px solid rgba(0,0,0,.12);background:white!important}.actions-td>div{display:flex;flex-direction:row;height:100%}.mat-row-processing:after{background:linear-gradient(110deg,rgba(225,225,225,.5) 8%,rgba(255,255,255,.8) 18%,rgba(225,225,225,.5) 33%);opacity:.5;background-size:200% 100%;animation:1.5s shine linear infinite;cursor:not-allowed;position:absolute;left:0;content:\"\";width:100%;height:inherit}.mat-row-processing>*:not(:last-child){color:#d3d3d3!important;border-right:0px solid!important;border-left:0px solid!important}@keyframes shine{to{background-position-x:-200%}}.footercell{width:100%;border-radius:0 0 3px 3px}.mat-row.deletion-row{transition:all 1s ease!important;height:0px}.cell-align-left{float:left}.cell-align-center{margin-right:auto;margin-left:auto}.cell-align-right{float:right}.filter-container{display:flex;flex-direction:row;width:100%;overflow:hidden}.filter-container .filter-selector{margin-left:1rem;flex-grow:1}.cdk-drag-preview{background-color:#fff;padding:0!important;display:flex;justify-content:space-between;margin:0;align-items:center;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-preview>*{display:flex;align-items:center;justify-content:center;height:100%;flex-grow:1}.cdk-drag:not(.cdk-drag-disabled){cursor:move}.cdk-drag-placeholder{height:48px;width:0;opacity:0}.cdk-drop-list-dragging tr:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)!important}\n"], components: [{ type: i2.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { type: i2.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }, { type: i3.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i5.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i6.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { type: i7.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { type: i8.MatDrawerContainer, selector: "mat-drawer-container", inputs: ["autosize", "hasBackdrop"], outputs: ["backdropClick"], exportAs: ["matDrawerContainer"] }, { type: i8.MatDrawer, selector: "mat-drawer", inputs: ["position", "mode", "disableClose", "autoFocus", "opened"], outputs: ["openedChange", "opened", "openedStart", "closed", "closedStart", "positionChanged"], exportAs: ["matDrawer"] }, { type: i8.MatDrawerContent, selector: "mat-drawer-content" }, { type: i9.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { type: i10.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "id", "labelPosition", "name", "required", "checked", "disabled", "indeterminate", "aria-describedby", "value"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i11.MatSortHeader, selector: "[mat-sort-header]", inputs: ["disabled", "arrowPosition", "sortActionDescription", "disableClear", "mat-sort-header", "start"], exportAs: ["matSortHeader"] }, { type: i9.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { type: i9.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { type: i12.MatPaginator, selector: "mat-paginator", inputs: ["disabled"], exportAs: ["matPaginator"] }, { type: i13.MatProgressBar, selector: "mat-progress-bar", inputs: ["color", "mode", "value", "bufferValue"], outputs: ["animationEnd"], exportAs: ["matProgressBar"] }, { type: i14.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { type: i14.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { type: i15.MatDivider, selector: "mat-divider", inputs: ["vertical", "inset"] }, { type: i16.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "required", "checked", "aria-describedby"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i17.ConstrainCreatorComponent, selector: "litotable-constrain-creator", inputs: ["columns"], outputs: ["result-constrain"] }, { type: i18.MatCard, selector: "mat-card", exportAs: ["matCard"] }, { type: i19.LitoColorPickerComponent, selector: "app-lito-color-picker", inputs: ["colors", "content"], outputs: ["result", "newColorArray"] }, { type: i20.MatButtonToggle, selector: "mat-button-toggle", inputs: ["disableRipple", "aria-labelledby", "tabIndex", "appearance", "checked", "disabled", "id", "name", "aria-label", "value"], outputs: ["change"], exportAs: ["matButtonToggle"] }], directives: [{ type: i21.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.MatAccordion, selector: "mat-accordion", inputs: ["multi", "displayMode", "togglePosition", "hideToggle"], exportAs: ["matAccordion"] }, { type: i2.MatExpansionPanelTitle, selector: "mat-panel-title" }, { type: i21.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i22.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i21.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i14.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { type: i5.MatLabel, selector: "mat-label" }, { type: i23.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i23.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i24.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i23.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i21.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i11.MatSort, selector: "[matSort]", inputs: ["matSortDisabled", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortActive"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { type: i25.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "id", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListAutoScrollDisabled", "cdkDropListOrientation", "cdkDropListLockAxis", "cdkDropListData", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i9.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { type: i9.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { type: i9.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { type: i9.MatCellDef, selector: "[matCellDef]" }, { type: i9.MatCell, selector: "mat-cell, td[mat-cell]" }, { type: i9.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { type: i9.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { type: i25.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragDisabled", "cdkDragStartDelay", "cdkDragLockAxis", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragBoundary", "cdkDragRootElement", "cdkDragPreviewContainer", "cdkDragData", "cdkDragFreeDragPosition"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i25.CdkDragPlaceholder, selector: "ng-template[cdkDragPlaceholder]", inputs: ["data"] }, { type: i9.MatNoDataRow, selector: "ng-template[matNoDataRow]" }, { type: i14.MatMenuContent, selector: "ng-template[matMenuContent]" }, { type: i18.MatCardContent, selector: "mat-card-content, [mat-card-content], [matCardContent]" }, { type: i20.MatButtonToggleGroup, selector: "mat-button-toggle-group", inputs: ["appearance", "name", "vertical", "value", "multiple", "disabled"], outputs: ["valueChange", "change"], exportAs: ["matButtonToggleGroup"] }], pipes: { "number": i21.DecimalPipe, "date": i21.DatePipe, "currency": i21.CurrencyPipe, "cuit": i26.CuitPipe, "phone": i27.PhonePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LitotableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lito-table',
                    templateUrl: './lito-table.component.html',
                    styleUrls: ['./lito-table.component.css'],
                }]
        }], ctorParameters: function () { return [{ type: i1.LiveAnnouncer }]; }, propDecorators: { paginator: [{
                type: ViewChild,
                args: [MatPaginator]
            }], inputSource: [{
                type: Input,
                args: ['source']
            }], dataType: [{
                type: Input,
                args: ['type']
            }], tableActionsConfig: [{
                type: Input,
                args: ['tableActionsConfig']
            }], selection: [{
                type: Input,
                args: ['selection']
            }], tableConfigurations: [{
                type: Input,
                args: ['configurations']
            }], fieldConstrians: [{
                type: Input,
                args: ['fieldConstrians']
            }], sort: [{
                type: ViewChild,
                args: [MatSort]
            }], drawer: [{
                type: ViewChild,
                args: [MatDrawer]
            }], multipleActionOutput: [{
                type: Output,
                args: ['multipleActionOutput']
            }], singleActionOutput: [{
                type: Output,
                args: ['singleActionOutput']
            }] } });
export class DisplayedColumns {
    constructor(columns = [], selectable = false, actionsColumn = false) {
        this.columns = columns;
        this.columnNames = columns
            .filter((c) => c.visible == true)
            .map((x) => x.name);
        this.columnTypes = columns.map((x) => x.type);
        this.selectable = selectable;
        this.actionColumn = actionsColumn;
        if (selectable)
            this.columnNames.unshift('selection');
        if (actionsColumn)
            this.columnNames.push('actions');
        this.columnGroups = new ColumnGroups(columns.length);
    }
    changeColumnVisivility(column) {
        this.columns.filter((c) => c == column)[0].visible = !column.visible;
        this.columnNames = this.columns
            .filter((c) => c.visible == true)
            .map((x) => x.name);
        if (this.selectable)
            this.columnNames.unshift('selection');
        if (this.actionColumn)
            this.columnNames.push('actions');
        this.updateGroups();
    }
    updateVisivility() {
        this.columnNames = this.columns
            .filter((c) => c.visible == true)
            .map((x) => x.name);
        if (this.selectable)
            this.columnNames.unshift('selection');
        if (this.actionColumn)
            this.columnNames.push('actions');
        this.updateGroups();
    }
    updateGroups() {
        this.columnGroups.updateColumns(this.columns.filter((c) => c.visible == true));
    }
    allVisible() {
        this.columns.forEach((c) => (c.visible = true));
        this.columnNames = this.columns
            .filter((c) => c.visible == true)
            .map((x) => x.name);
        if (this.selectable)
            this.columnNames.unshift('selection');
        if (this.actionColumn)
            this.columnNames.push('actions');
    }
}
export class GroupColumn {
    constructor(name) {
        this.columns = [];
        this.count = 0;
        this.start = 0;
        this.colspan = 1;
        this.name = name;
        this.checked = this.checkState();
    }
    updateColspan() {
        let groupData = this.columns
            .filter((x) => x.visible)
            .sort((a, b) => a.order - b.order);
        this.colspan = groupData.length;
        if (groupData.length != 0)
            this.start = groupData[0].order;
        this.checked = this.checkState();
    }
    addColumn(c) {
        this.columns.push(c);
        this.updateColspan();
    }
    toogleVisibbility(state) {
        for (const c of this.columns) {
            c.visible = state;
        }
    }
    checkState() {
        return this.columns.some((x) => x.visible);
    }
}
export class ColumnGroups {
    constructor(length) {
        this.active = false;
        this.groupColumns = [];
        this.displayNames = [];
        this.size = 0;
        this.displayNames = new Array(length).fill('empty-group');
    }
    updateColumns(visibleColumns) {
        this.displayNames = new Array(visibleColumns.length).fill('empty-group');
        this.groupColumns.forEach((e) => e.updateColspan());
        let deletion = 0;
        for (let i = 0; i < this.groupColumns.length; i++) {
            const element = this.groupColumns[i];
            const firstVisible = element.columns.filter((y) => y.visible)[0];
            if (element.colspan != 0) {
                let index = visibleColumns.findIndex((x) => x.propertyKey == firstVisible.propertyKey);
                this.displayNames.splice(1 + index - deletion, element.colspan, element.name);
                deletion += element.colspan - 1;
            }
        }
        /*
        this.displayNames = visibleColumns
          .reduce(
            (a, c) => {
              const includes = this.groupColumns.some((x) => x.columns.includes(c));
              let str = '';
              this.groupColumns.forEach((gc) => {
                if (gc.columns.includes(c)) {
                  str = gc.name;
                }
              });
              a.push(includes ? str : 'empty-group');
              return a;
            },
            ['empty-group']
          )
          .reduce(
            (a, c) => {
              if (c == 'empty-group' || !a.includes(c)) {
                a.push(c);
              }
              return a;
            },
            ['empty-group']
          );
        */
        this.displayNames.unshift();
    }
}
export class RowConstrain {
    constructor(name, _constrain) {
        this.name = name;
        this._constrain = _constrain;
    }
}
//# sourceMappingURL=data:application/json;base64,